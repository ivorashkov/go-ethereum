version: "3.9"

services:
  geth:
    container_name: geth-devnet-go-ethereum
    image: ivaylorashkov/go-ethereum:latest
    # networks:
    #   - devnet
    ports:
      - "8545:8545"  # Map host port 8545 to container port 8545
      - "8546:8546"  # Map host port 8546 to container port 8546
      - "30303:30303"  # Map host port 30303 to container port 30303
      - "30303:30303/udp"  # Map UDP port 30303 to the container
    volumes:
      - eth_data:/root/.ethereum  # Mount a Docker volume for persistent Ethereum data

    command: >
      --dev
      --http
      --http.addr=0.0.0.0
      --http.port=8545
      --http.api=web3,eth,net,personal
      --http.vhosts=*
      --dev.period=5
   
# extracted dependencies from https://github.com/blockscout/blockscout/blob/master/docker-compose/docker-compose.yml
  redis-db:
    extends:
      file: ./services/redis.yml
      service: redis-db

  db-init:
    extends:
      file: ./services/db.yml
      service: db-init

  db:
    depends_on:
      db-init:
        condition: service_completed_successfully
    extends:
      file: ./services/db.yml
      service: db

  backend:
    depends_on:
      - db
      - redis-db
    extends:
      file: ./services/backend.yml
      service: backend
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      args:
        RELEASE_VERSION: 7.0.0
    links:
      - db:database
    environment:
        ETHEREUM_JSONRPC_HTTP_URL: http://host.docker.internal:8545/
        ETHEREUM_JSONRPC_TRACE_URL: http://host.docker.internal:8545/
        ETHEREUM_JSONRPC_WS_URL: ws://host.docker.internal:8545/
        CHAIN_ID: '1337'

  nft_media_handler:
    depends_on:
      - backend
    extends:
      file: ./services/nft_media_handler.yml
      service: nft_media_handler
    build:
      context: ..
      dockerfile: ./docker/Dockerfile
      args:
        RELEASE_VERSION: 7.0.0

  visualizer:
    extends:
      file: ./services/visualizer.yml
      service: visualizer

  sig-provider:
    extends:
      file: ./services/sig-provider.yml
      service: sig-provider

  frontend:
    depends_on:
      - backend
    extends:
      file: ./services/frontend.yml
      service: frontend

  stats-db-init:
    extends:
      file: ./services/stats.yml
      service: stats-db-init

  stats-db:
    depends_on:
      stats-db-init:
        condition: service_completed_successfully
    extends:
      file: ./services/stats.yml
      service: stats-db

  stats:
    depends_on:
      - stats-db
      - backend
    extends:
      file: ./services/stats.yml
      service: stats

  user-ops-indexer:
    depends_on:
      - db
      - backend
    extends:
      file: ./services/user-ops-indexer.yml
      service: user-ops-indexer

  proxy:
    depends_on:
      - backend
      - frontend
      - stats
    extends:
      file: ./services/nginx.yml
      service: proxy

# networks:
#   devnet:
#     driver: bridge


volumes:
  eth_data:  # Define the volume here